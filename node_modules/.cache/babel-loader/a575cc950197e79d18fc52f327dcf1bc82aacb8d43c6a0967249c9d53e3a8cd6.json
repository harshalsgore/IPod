{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HARSHAL\\\\Desktop\\\\CN Projects\\\\react\\\\i-pod\\\\src\\\\React\\\\Song.jsx\";\nimport { Component } from \"react\";\nimport { ArrayList } from \"./arrayList\";\nimport CSS from \"../CSS/Song.module.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default class Song extends Component {\n  constructor() {\n    super();\n    this.updateSongState = currentSong => {\n      const {\n        btnFunction,\n        currentSongIndex\n      } = this.props;\n      this.musicDuration = this.formatTime(ArrayList.Songs[currentSongIndex].duration);\n      this.setState({\n        seekBarValue: currentSong.currentTime,\n        currentTimeToBeDisplay: this.formatTime(currentSong.currentTime)\n      });\n      this.intervalId ? clearInterval(this.intervalId) : this.intervalId = null;\n      this.intervalId = setInterval(() => {\n        if (Math.round(currentSong.currentTime) >= Math.round(currentSong.duration)) {\n          clearInterval(this.intervalId);\n          btnFunction.forwardBtn();\n          return;\n        }\n        this.setState({\n          seekBarValue: currentSong.currentTime,\n          currentTimeToBeDisplay: this.formatTime(currentSong.currentTime)\n        });\n      }, 1000);\n    };\n    this.formatTime = time => {\n      let min = Math.floor(time / 60);\n      if (min < 10) {\n        min = `0${min}`;\n      }\n      let sec = Math.floor(time % 60);\n      if (sec < 10) {\n        sec = `0${sec}`;\n      }\n      return `${min}  :  ${sec}`;\n    };\n    this.seekBarChange = value => {\n      const {\n        currentSong\n      } = this.props;\n      currentSong.currentTime = value;\n      this.updateSongState(currentSong);\n    };\n    this.state = {\n      seekBarValue: 0,\n      currentTimeToBeDisplay: \"0:00\"\n    };\n    this.musicDuration = \"-:--\";\n    this.intervalId = null;\n  }\n  componentDidMount() {\n    this.updateSongState(this.props.currentSong);\n  }\n  componentDidUpdate(prevProps) {\n    if (prevProps.currentSongIndex !== this.props.currentSongIndex) {\n      const {\n        currentSong\n      } = this.props;\n      this.updateSongState(currentSong);\n    }\n  }\n  render() {\n    const {\n      currentSongIndex\n    } = this.props;\n    const song = ArrayList.Songs[currentSongIndex];\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: CSS.musicPlayer,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: CSS.backgroundImage,\n          style: {\n            backgroundImage: `url(${song.icon})`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: CSS.songDetails,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: CSS.songImage,\n            children: /*#__PURE__*/_jsxDEV(\"img\", {\n              src: song.icon,\n              alt: \"\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: CSS.songName,\n            children: /*#__PURE__*/_jsxDEV(\"h3\", {\n              children: song.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: CSS.seekBarAndTime,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: CSS.seekBarBox,\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              max: song.duration,\n              value: this.state.seekBarValue,\n              onChange: event => this.seekBarChange(event.target.value),\n              className: CSS.seekBar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: CSS.seekTime,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: CSS.currentTime,\n              children: this.state.currentTimeToBeDisplay\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 105,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: CSS.totalTime,\n              children: this.musicDuration\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n}","map":{"version":3,"names":["Component","ArrayList","CSS","jsxDEV","_jsxDEV","Fragment","_Fragment","Song","constructor","updateSongState","currentSong","btnFunction","currentSongIndex","props","musicDuration","formatTime","Songs","duration","setState","seekBarValue","currentTime","currentTimeToBeDisplay","intervalId","clearInterval","setInterval","Math","round","forwardBtn","time","min","floor","sec","seekBarChange","value","state","componentDidMount","componentDidUpdate","prevProps","render","song","children","className","musicPlayer","backgroundImage","style","icon","fileName","_jsxFileName","lineNumber","columnNumber","songDetails","songImage","src","alt","songName","name","seekBarAndTime","seekBarBox","type","max","onChange","event","target","seekBar","seekTime","totalTime"],"sources":["C:/Users/HARSHAL/Desktop/CN Projects/react/i-pod/src/React/Song.jsx"],"sourcesContent":["import { Component } from \"react\";\r\nimport { ArrayList } from \"./arrayList\";\r\nimport CSS from \"../CSS/Song.module.css\";\r\n\r\nexport default class Song extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      seekBarValue: 0,\r\n      currentTimeToBeDisplay: \"0:00\",\r\n    };\r\n    this.musicDuration = \"-:--\";\r\n    this.intervalId = null;\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.updateSongState(this.props.currentSong);\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.currentSongIndex !== this.props.currentSongIndex) {\r\n      const { currentSong } = this.props;\r\n      this.updateSongState(currentSong);\r\n    }\r\n  }\r\n\r\n  updateSongState = (currentSong) => {\r\n    const { btnFunction, currentSongIndex } = this.props;\r\n    this.musicDuration = this.formatTime(\r\n      ArrayList.Songs[currentSongIndex].duration\r\n    );\r\n\r\n    this.setState({\r\n      seekBarValue: currentSong.currentTime,\r\n      currentTimeToBeDisplay: this.formatTime(currentSong.currentTime),\r\n    });\r\n\r\n    this.intervalId ? clearInterval(this.intervalId) : (this.intervalId = null);\r\n\r\n    this.intervalId = setInterval(() => {\r\n      if (\r\n        Math.round(currentSong.currentTime) >= Math.round(currentSong.duration)\r\n      ) {\r\n        clearInterval(this.intervalId);\r\n        btnFunction.forwardBtn();\r\n        return;\r\n      }\r\n      this.setState({\r\n        seekBarValue: currentSong.currentTime,\r\n        currentTimeToBeDisplay: this.formatTime(currentSong.currentTime),\r\n      });\r\n    }, 1000);\r\n  };\r\n\r\n  formatTime = (time) => {\r\n    let min = Math.floor(time / 60);\r\n    if (min < 10) {\r\n      min = `0${min}`;\r\n    }\r\n    let sec = Math.floor(time % 60);\r\n    if (sec < 10) {\r\n      sec = `0${sec}`;\r\n    }\r\n    return `${min}  :  ${sec}`;\r\n  };\r\n\r\n  seekBarChange = (value) => {\r\n    const { currentSong } = this.props;\r\n\r\n    currentSong.currentTime = value;\r\n    this.updateSongState(currentSong);\r\n  };\r\n\r\n  render() {\r\n    const { currentSongIndex } = this.props;\r\n    const song = ArrayList.Songs[currentSongIndex];\r\n\r\n    return (\r\n      <>\r\n        <div className={CSS.musicPlayer}>\r\n          <div\r\n            className={CSS.backgroundImage}\r\n            style={{ backgroundImage: `url(${song.icon})` }}\r\n          ></div>\r\n          <div className={CSS.songDetails}>\r\n            <div className={CSS.songImage}>\r\n              <img src={song.icon} alt=\"\" />\r\n            </div>\r\n            <div className={CSS.songName}>\r\n              <h3>{song.name}</h3>\r\n            </div>\r\n          </div>\r\n          <div className={CSS.seekBarAndTime}>\r\n            <div className={CSS.seekBarBox}>\r\n              <input\r\n                type=\"range\"\r\n                max={song.duration}\r\n                value={this.state.seekBarValue}\r\n                onChange={(event) => this.seekBarChange(event.target.value)}\r\n                className={CSS.seekBar}\r\n              />\r\n            </div>\r\n            <div className={CSS.seekTime}>\r\n              <div className={CSS.currentTime}>\r\n                {this.state.currentTimeToBeDisplay}\r\n              </div>\r\n              <div className={CSS.totalTime}>{this.musicDuration}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}